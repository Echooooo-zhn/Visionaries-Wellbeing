{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport replaceTextWithMeta from './lib/replaceTextWithMeta';\nimport { CharacterMetadata, ContentBlock, ContentState, genKey } from 'draft-js';\nimport { List, Map, OrderedSet, Repeat, Seq } from 'immutable';\nimport { BLOCK_TYPE, ENTITY_TYPE, INLINE_STYLE } from 'draft-js-utils';\nimport { NODE_TYPE_ELEMENT, NODE_TYPE_TEXT } from 'synthetic-dom';\nimport { INLINE_ELEMENTS, SPECIAL_ELEMENTS, SELF_CLOSING_ELEMENTS } from './lib/Constants';\nvar DATA_URL = /^data:/i;\nvar NO_STYLE = OrderedSet();\nvar NO_ENTITY = null;\nvar EMPTY_BLOCK = new ContentBlock({\n  key: genKey(),\n  text: '',\n  type: BLOCK_TYPE.UNSTYLED,\n  characterList: List(),\n  depth: 0\n});\nvar LINE_BREAKS = /(\\r\\n|\\r|\\n)/g; // We use `\\r` because that character is always stripped from source (normalized\n// to `\\n`), so it's safe to assume it will only appear in the text content when\n// we put it there as a placeholder.\n\nvar SOFT_BREAK_PLACEHOLDER = '\\r';\nvar ZERO_WIDTH_SPACE = \"\\u200B\";\nvar DATA_ATTRIBUTE = /^data-([a-z0-9-]+)$/; // Map element attributes to entity data.\n\nvar ELEM_ATTR_MAP = {\n  a: {\n    href: 'url',\n    rel: 'rel',\n    target: 'target',\n    title: 'title'\n  },\n  img: {\n    src: 'src',\n    alt: 'alt',\n    width: 'width',\n    height: 'height'\n  }\n};\n\nvar getEntityData = function getEntityData(tagName, element) {\n  var data = {};\n\n  if (ELEM_ATTR_MAP.hasOwnProperty(tagName)) {\n    var attrMap = ELEM_ATTR_MAP[tagName];\n\n    for (var i = 0; i < element.attributes.length; i++) {\n      var _element$attributes$i = element.attributes[i],\n          name = _element$attributes$i.name,\n          value = _element$attributes$i.value;\n\n      if (typeof value === 'string') {\n        var strVal = value;\n\n        if (attrMap.hasOwnProperty(name)) {\n          var newName = attrMap[name];\n          data[newName] = strVal;\n        } else if (DATA_ATTRIBUTE.test(name)) {\n          data[name] = strVal;\n        }\n      }\n    }\n  }\n\n  return data;\n}; // Functions to create entities from elements.\n\n\nvar ElementToEntity = {\n  a: function a(generator, tagName, element) {\n    var data = getEntityData(tagName, element); // Don't add `<a>` elements with invalid href.\n\n    if (isAllowedHref(data.url)) {\n      return generator.createEntity(ENTITY_TYPE.LINK, data);\n    }\n  },\n  img: function img(generator, tagName, element) {\n    var data = getEntityData(tagName, element); // Don't add `<img>` elements with no src.\n\n    if (data.src != null) {\n      return generator.createEntity(ENTITY_TYPE.IMAGE, data);\n    }\n  }\n};\n\nvar ContentGenerator = /*#__PURE__*/function () {\n  // This will be passed to the customInlineFn to allow it\n  // to return a Style() or Entity().\n  function ContentGenerator() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ContentGenerator);\n\n    _defineProperty(this, \"contentStateForEntities\", void 0);\n\n    _defineProperty(this, \"blockStack\", void 0);\n\n    _defineProperty(this, \"blockList\", void 0);\n\n    _defineProperty(this, \"depth\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"inlineCreators\", {\n      Style: function (_Style) {\n        function Style(_x) {\n          return _Style.apply(this, arguments);\n        }\n\n        Style.toString = function () {\n          return _Style.toString();\n        };\n\n        return Style;\n      }(function (style) {\n        return {\n          type: 'STYLE',\n          style: style\n        };\n      }),\n      Entity: function Entity(type, data) {\n        var mutability = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'MUTABLE';\n        return {\n          type: 'ENTITY',\n          entityKey: _this.createEntity(type, toStringMap(data), mutability)\n        };\n      }\n    });\n\n    this.options = options;\n    this.contentStateForEntities = ContentState.createFromBlockArray([]); // This represents the hierarchy as we traverse nested elements; for\n    // example [body, ul, li] where we must know li's parent type (ul or ol).\n\n    this.blockStack = []; // This is a linear list of blocks that will form the output; for example\n    // [p, li, li, blockquote].\n\n    this.blockList = [];\n    this.depth = 0;\n  }\n\n  _createClass(ContentGenerator, [{\n    key: \"process\",\n    value: function process(element) {\n      this.processBlockElement(element);\n      var contentBlocks = [];\n      this.blockList.forEach(function (block) {\n        var _concatFragments = concatFragments(block.textFragments),\n            text = _concatFragments.text,\n            characterMeta = _concatFragments.characterMeta;\n\n        var includeEmptyBlock = false; // If the block contains only a soft break then don't discard the block,\n        // but discard the soft break.\n\n        if (text === SOFT_BREAK_PLACEHOLDER) {\n          includeEmptyBlock = true;\n          text = '';\n        }\n\n        if (block.tagName === 'pre') {\n          var _trimLeadingNewline = trimLeadingNewline(text, characterMeta);\n\n          text = _trimLeadingNewline.text;\n          characterMeta = _trimLeadingNewline.characterMeta;\n        } else {\n          var _collapseWhiteSpace = collapseWhiteSpace(text, characterMeta);\n\n          text = _collapseWhiteSpace.text;\n          characterMeta = _collapseWhiteSpace.characterMeta;\n        } // Previously we were using a placeholder for soft breaks. Now that we\n        // have collapsed whitespace we can change it back to normal line breaks.\n\n\n        text = text.split(SOFT_BREAK_PLACEHOLDER).join('\\n'); // Discard empty blocks (unless otherwise specified).\n\n        if (text.length || includeEmptyBlock) {\n          contentBlocks.push(new ContentBlock({\n            key: genKey(),\n            text: text,\n            type: block.type,\n            characterList: characterMeta.toList(),\n            depth: block.depth,\n            data: block.data ? Map(block.data) : Map()\n          }));\n        }\n      });\n\n      if (!contentBlocks.length) {\n        contentBlocks = [EMPTY_BLOCK];\n      }\n\n      return ContentState.createFromBlockArray(contentBlocks, this.contentStateForEntities.getEntityMap());\n    }\n  }, {\n    key: \"getBlockTypeFromTagName\",\n    value: function getBlockTypeFromTagName(tagName) {\n      var blockTypes = this.options.blockTypes;\n\n      if (blockTypes && blockTypes[tagName]) {\n        return blockTypes[tagName];\n      }\n\n      switch (tagName) {\n        case 'li':\n          {\n            var parent = this.blockStack.slice(-1)[0];\n            return parent.tagName === 'ol' ? BLOCK_TYPE.ORDERED_LIST_ITEM : BLOCK_TYPE.UNORDERED_LIST_ITEM;\n          }\n\n        case 'blockquote':\n          {\n            return BLOCK_TYPE.BLOCKQUOTE;\n          }\n\n        case 'h1':\n          {\n            return BLOCK_TYPE.HEADER_ONE;\n          }\n\n        case 'h2':\n          {\n            return BLOCK_TYPE.HEADER_TWO;\n          }\n\n        case 'h3':\n          {\n            return BLOCK_TYPE.HEADER_THREE;\n          }\n\n        case 'h4':\n          {\n            return BLOCK_TYPE.HEADER_FOUR;\n          }\n\n        case 'h5':\n          {\n            return BLOCK_TYPE.HEADER_FIVE;\n          }\n\n        case 'h6':\n          {\n            return BLOCK_TYPE.HEADER_SIX;\n          }\n\n        case 'pre':\n          {\n            return BLOCK_TYPE.CODE;\n          }\n\n        case 'figure':\n          {\n            return BLOCK_TYPE.ATOMIC;\n          }\n\n        default:\n          {\n            return BLOCK_TYPE.UNSTYLED;\n          }\n      }\n    }\n  }, {\n    key: \"processBlockElement\",\n    value: function processBlockElement(element) {\n      if (!element) {\n        return;\n      }\n\n      var customBlockFn = this.options.customBlockFn;\n      var tagName = element.nodeName.toLowerCase();\n      var type;\n      var data;\n\n      if (customBlockFn) {\n        var customBlock = customBlockFn(element);\n\n        if (customBlock != null) {\n          type = customBlock.type;\n          data = customBlock.data;\n        }\n      }\n\n      var isCustomType = true;\n\n      if (type == null) {\n        isCustomType = false;\n        type = this.getBlockTypeFromTagName(tagName);\n      }\n\n      if (type === BLOCK_TYPE.CODE) {\n        var language = element.getAttribute('data-language');\n\n        if (language) {\n          data = _objectSpread({}, data, {\n            language: language\n          });\n        }\n      }\n\n      var hasDepth = canHaveDepth(type);\n      var allowRender = !SPECIAL_ELEMENTS.hasOwnProperty(tagName);\n\n      if (!isCustomType && !hasSemanticMeaning(type)) {\n        var parent = this.blockStack.slice(-1)[0];\n\n        if (parent) {\n          type = parent.type;\n        }\n      }\n\n      var block = {\n        tagName: tagName,\n        textFragments: [],\n        type: type,\n        styleStack: [NO_STYLE],\n        entityStack: [NO_ENTITY],\n        depth: hasDepth ? this.depth : 0,\n        data: data\n      };\n\n      if (allowRender) {\n        this.blockList.push(block);\n\n        if (hasDepth) {\n          this.depth += 1;\n        }\n      }\n\n      this.blockStack.push(block);\n\n      if (element.childNodes != null) {\n        Array.from(element.childNodes).forEach(this.processNode, this);\n      }\n\n      this.blockStack.pop();\n\n      if (allowRender && hasDepth) {\n        this.depth -= 1;\n      }\n    }\n  }, {\n    key: \"processInlineElement\",\n    value: function processInlineElement(element) {\n      var tagName = element.nodeName.toLowerCase();\n\n      if (tagName === 'br') {\n        this.processText(SOFT_BREAK_PLACEHOLDER);\n        return;\n      }\n\n      var block = this.blockStack.slice(-1)[0];\n      var style = block.styleStack.slice(-1)[0];\n      var entityKey = block.entityStack.slice(-1)[0];\n      var customInlineFn = this.options.customInlineFn;\n      var customInline = customInlineFn ? customInlineFn(element, this.inlineCreators) : null;\n\n      if (customInline != null) {\n        switch (customInline.type) {\n          case 'STYLE':\n            {\n              style = style.add(customInline.style);\n              break;\n            }\n\n          case 'ENTITY':\n            {\n              entityKey = customInline.entityKey;\n              break;\n            }\n        }\n      } else {\n        style = addStyleFromTagName(style, tagName, this.options.elementStyles);\n\n        if (ElementToEntity.hasOwnProperty(tagName)) {\n          // If the to-entity function returns nothing, use the existing entity.\n          entityKey = ElementToEntity[tagName](this, tagName, element) || entityKey;\n        }\n      }\n\n      block.styleStack.push(style);\n      block.entityStack.push(entityKey);\n\n      if (element.childNodes != null) {\n        Array.from(element.childNodes).forEach(this.processNode, this);\n      }\n\n      if (SELF_CLOSING_ELEMENTS.hasOwnProperty(tagName)) {\n        this.processText(\"\\xA0\");\n      }\n\n      block.entityStack.pop();\n      block.styleStack.pop();\n    }\n  }, {\n    key: \"processTextNode\",\n    value: function processTextNode(node) {\n      var text = node.nodeValue; // This is important because we will use \\r as a placeholder for a soft break.\n\n      text = text.replace(LINE_BREAKS, '\\n'); // Replace zero-width space (we use it as a placeholder in markdown) with a\n      // soft break.\n      // TODO: The import-markdown package should correctly turn breaks into <br>\n      // elements so we don't need to include this hack.\n\n      text = text.split(ZERO_WIDTH_SPACE).join(SOFT_BREAK_PLACEHOLDER);\n      this.processText(text);\n    }\n  }, {\n    key: \"processText\",\n    value: function processText(text) {\n      var block = this.blockStack.slice(-1)[0];\n      var style = block.styleStack.slice(-1)[0];\n      var entity = block.entityStack.slice(-1)[0];\n      var charMetadata = CharacterMetadata.create({\n        style: style,\n        entity: entity\n      });\n      var seq = Repeat(charMetadata, text.length);\n      block.textFragments.push({\n        text: text,\n        characterMeta: seq\n      });\n    }\n  }, {\n    key: \"processNode\",\n    value: function processNode(node) {\n      if (node.nodeType === NODE_TYPE_ELEMENT) {\n        // $FlowIssue\n        var _element = node;\n\n        var _tagName = _element.nodeName.toLowerCase();\n\n        if (INLINE_ELEMENTS.hasOwnProperty(_tagName)) {\n          this.processInlineElement(_element);\n        } else {\n          this.processBlockElement(_element);\n        }\n      } else if (node.nodeType === NODE_TYPE_TEXT) {\n        this.processTextNode(node);\n      }\n    }\n  }, {\n    key: \"createEntity\",\n    value: function createEntity(type, data) {\n      var mutability = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'MUTABLE';\n      this.contentStateForEntities = this.contentStateForEntities.createEntity(type, mutability, data);\n      return this.contentStateForEntities.getLastCreatedEntityKey();\n    }\n  }]);\n\n  return ContentGenerator;\n}();\n\nfunction trimLeadingNewline(text, characterMeta) {\n  if (text.charAt(0) === '\\n') {\n    text = text.slice(1);\n    characterMeta = characterMeta.slice(1);\n  }\n\n  return {\n    text: text,\n    characterMeta: characterMeta\n  };\n}\n\nfunction trimLeadingSpace(text, characterMeta) {\n  while (text.charAt(0) === ' ') {\n    text = text.slice(1);\n    characterMeta = characterMeta.slice(1);\n  }\n\n  return {\n    text: text,\n    characterMeta: characterMeta\n  };\n}\n\nfunction trimTrailingSpace(text, characterMeta) {\n  while (text.slice(-1) === ' ') {\n    text = text.slice(0, -1);\n    characterMeta = characterMeta.slice(0, -1);\n  }\n\n  return {\n    text: text,\n    characterMeta: characterMeta\n  };\n}\n\nfunction collapseWhiteSpace(text, characterMeta) {\n  text = text.replace(/[ \\t\\n]/g, ' ');\n\n  var _trimLeadingSpace = trimLeadingSpace(text, characterMeta);\n\n  text = _trimLeadingSpace.text;\n  characterMeta = _trimLeadingSpace.characterMeta;\n\n  var _trimTrailingSpace = trimTrailingSpace(text, characterMeta);\n\n  text = _trimTrailingSpace.text;\n  characterMeta = _trimTrailingSpace.characterMeta;\n  var i = text.length;\n\n  while (i--) {\n    if (text.charAt(i) === ' ' && text.charAt(i - 1) === ' ') {\n      text = text.slice(0, i) + text.slice(i + 1);\n      characterMeta = characterMeta.slice(0, i).concat(characterMeta.slice(i + 1));\n    }\n  } // There could still be one space on either side of a softbreak.\n\n\n  var _replaceTextWithMeta = replaceTextWithMeta({\n    text: text,\n    characterMeta: characterMeta\n  }, SOFT_BREAK_PLACEHOLDER + ' ', SOFT_BREAK_PLACEHOLDER);\n\n  text = _replaceTextWithMeta.text;\n  characterMeta = _replaceTextWithMeta.characterMeta;\n\n  var _replaceTextWithMeta2 = replaceTextWithMeta({\n    text: text,\n    characterMeta: characterMeta\n  }, ' ' + SOFT_BREAK_PLACEHOLDER, SOFT_BREAK_PLACEHOLDER);\n\n  text = _replaceTextWithMeta2.text;\n  characterMeta = _replaceTextWithMeta2.characterMeta;\n  return {\n    text: text,\n    characterMeta: characterMeta\n  };\n}\n\nfunction canHaveDepth(blockType) {\n  switch (blockType) {\n    case BLOCK_TYPE.UNORDERED_LIST_ITEM:\n    case BLOCK_TYPE.ORDERED_LIST_ITEM:\n      {\n        return true;\n      }\n\n    default:\n      {\n        return false;\n      }\n  }\n}\n\nfunction concatFragments(fragments) {\n  var text = '';\n  var characterMeta = Seq();\n  fragments.forEach(function (textFragment) {\n    text = text + textFragment.text;\n    characterMeta = characterMeta.concat(textFragment.characterMeta);\n  });\n  return {\n    text: text,\n    characterMeta: characterMeta\n  };\n}\n\nfunction addStyleFromTagName(styleSet, tagName, elementStyles) {\n  switch (tagName) {\n    case 'b':\n    case 'strong':\n      {\n        return styleSet.add(INLINE_STYLE.BOLD);\n      }\n\n    case 'i':\n    case 'em':\n      {\n        return styleSet.add(INLINE_STYLE.ITALIC);\n      }\n\n    case 'u':\n    case 'ins':\n      {\n        return styleSet.add(INLINE_STYLE.UNDERLINE);\n      }\n\n    case 'code':\n      {\n        return styleSet.add(INLINE_STYLE.CODE);\n      }\n\n    case 's':\n    case 'del':\n      {\n        return styleSet.add(INLINE_STYLE.STRIKETHROUGH);\n      }\n\n    default:\n      {\n        // Allow custom styles to be provided.\n        if (elementStyles && elementStyles[tagName]) {\n          return styleSet.add(elementStyles[tagName]);\n        }\n\n        return styleSet;\n      }\n  }\n}\n\nfunction hasSemanticMeaning(blockType) {\n  return blockType !== BLOCK_TYPE.UNSTYLED;\n}\n\nfunction toStringMap(input) {\n  var result = {};\n\n  if (input !== null && _typeof(input) === 'object' && !Array.isArray(input)) {\n    var obj = input;\n\n    for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n      var _key = _Object$keys[_i];\n      var value = obj[_key];\n\n      if (typeof value === 'string') {\n        result[_key] = value;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction isAllowedHref(input) {\n  if (input == null || input.match(DATA_URL)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function stateFromElement(element, options) {\n  return new ContentGenerator(options).process(element);\n}\nexport default stateFromElement;","map":null,"metadata":{},"sourceType":"module"}