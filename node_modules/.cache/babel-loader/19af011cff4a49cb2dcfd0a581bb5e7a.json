{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\99489\\\\Desktop\\\\COMP9323\\\\aws\\\\amplifyapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\99489\\\\Desktop\\\\COMP9323\\\\aws\\\\amplifyapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\99489\\\\Desktop\\\\COMP9323\\\\aws\\\\amplifyapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\99489\\\\Desktop\\\\COMP9323\\\\aws\\\\amplifyapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n// control action for chatbot\nimport { apiCall } from '../../Main';\nimport { useNavigate } from 'react-router-dom';\n\nvar ActionProvider = function ActionProvider(createChatBotMessage, setStateFunc, createClientMessage) {\n  var _this = this;\n\n  _classCallCheck(this, ActionProvider);\n\n  this.handleMeeting = function () {\n    var message = _this.createChatBotMessage(\"Do you want to book a meeting?\", {\n      widget: \"optionsmeeting\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleMeetingTure = function () {\n    var message = _this.createChatBotMessage(\"Which field to you wank to have meeting?\", {\n      widget: \"optionsmeetingfield\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleQuestion = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(text) {\n      var data, message;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return apiCall('/chatbot', 'POST', {\n                state: 1,\n                input_text: text\n              }, _this.navigate);\n\n            case 2:\n              data = _context.sent;\n\n              if (!(typeof data === 'string' && (!data.startsWith('200') || !data.startsWith('201')))) {\n                _context.next = 6;\n                break;\n              }\n\n              _this.navigate('/login');\n\n              return _context.abrupt(\"return\");\n\n            case 6:\n              message = _this.createChatBotMessage(\"Sure! Which type of information you would like to get?\", {\n                widget: \"optionsquestion\"\n              });\n\n              _this.setChatbotMessage(message);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  this.handleVideos = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var send, message, message7;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return apiCall('/chatbot', 'POST', {\n              state: 2,\n              input_text: 'video'\n            });\n\n          case 2:\n            send = _context2.sent;\n\n            _this.setState(function (state) {\n              return _objectSpread({}, state, {\n                src: send\n              });\n            });\n\n            message = _this.createChatBotMessage(\"Ok, heres are some video link you can have a look relate to your question\", {\n              widget: \"herfWidget\"\n            });\n            console.log('herfwidge');\n\n            _this.setChatbotMessage(message);\n\n            message7 = _this.createChatBotMessage(\"Do you satisfied with this result or do want want to see some related questions?\", {\n              widget: \"optionsquestionvideo\"\n            });\n\n            _this.setChatbotMessage(message7);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  this.handleGuides = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var send, message, message3;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return apiCall('/chatbot', 'POST', {\n              state: 2,\n              input_text: 'guide'\n            });\n\n          case 2:\n            send = _context3.sent;\n\n            _this.setState(function (state) {\n              return _objectSpread({}, state, {\n                src: send\n              });\n            });\n\n            message = _this.createChatBotMessage(\"Ok, heres are some solution to your questions\", {\n              widget: \"herfGuideWidget\"\n            });\n\n            _this.setChatbotMessage(message);\n\n            message3 = _this.createChatBotMessage(\"Do you still have some questions relate to this topic? You can post an question on our website or see some related questions.\", {\n              widget: \"optionsquestionguide\"\n            });\n\n            _this.setChatbotMessage(message3);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  this.handleRelate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var send, message, _message;\n\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return apiCall('/chatbot', 'POST', {\n              state: 3,\n              input_text: 'related'\n            });\n\n          case 2:\n            send = _context4.sent;\n            console.log(send);\n\n            if (send.text.length !== 0) {\n              message = _this.createChatBotMessage(\"Here are several related questions, you can ask me by sending me message\");\n\n              _this.setChatbotMessage(message);\n\n              send.text.map(function (s) {\n                var message2 = _this.createChatBotMessage(s);\n\n                _this.setChatbotMessage(message2);\n              });\n            } else {\n              _message = _this.createChatBotMessage(\"Here are no related questions\");\n\n              _this.setChatbotMessage(_message);\n            }\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  this.handlePost = function () {\n    var message = _this.createChatBotMessage(\"Okay, please fill in the form\", {\n      widget: \"postform\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleSqlQuiz = function () {\n    var message = _this.createChatBotMessage(\"Sure! Here's your SQL QUIZ !\", {\n      widget: \"sql\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleUnknown = function () {\n    var message = _this.createChatBotMessage(\"Please ask a question\");\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleMeetingMentalHealth = function () {\n    var message = _this.createChatBotMessage(\"You can find some doctors to meet for mental health by click the following link\", {\n      widget: \"meetingmentalhealth\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleMeetingCovid19 = function () {\n    console.log('a??');\n\n    var message = _this.createChatBotMessage(\"You can find some doctors to meet for covid 19 by click the following link\", {\n      widget: \"meetingcovid19\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleMeetingStayingAtHome = function () {\n    var message = _this.createChatBotMessage(\"You can find some doctors to meet for staying at home by click the following link at home\", {\n      widget: \"meetingstayathome\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleMeetingCareerAdvice = function () {\n    var message = _this.createChatBotMessage(\"You can find some doctors to meet for career advice by click the following link advice\", {\n      widget: \"meetingcareeradvice\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleMeetingVaccation = function () {\n    var message = _this.createChatBotMessage(\"You can find some doctors to meet for vaccation by click the following link vaccation\", {\n      widget: \"meetingmvaccation\"\n    });\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleGreeting = function () {\n    apiCall('/chatbot', 'POST', {\n      state: 3,\n      input_text: 'true'\n    });\n\n    var message = _this.createChatBotMessage(\"Thanks for trying Wellbeing Bot! We hope you had a great experience\");\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.messageHandler = function () {\n    var message = _this.createChatBotMessage(\"Hello, ask me anything\");\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleCancle = function () {\n    var message = _this.createChatBotMessage(\"Thanks for trying! Feel free to ask anything!\");\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.handleSorry = function () {\n    apiCall('/chatbot', 'POST', {\n      state: 3,\n      input_text: 'false'\n    });\n\n    var message = _this.createChatBotMessage(\"I am sorry that I do not find those infromations you want :( . You can ask a new questions or ask your previous questions more detailed.\");\n\n    _this.setChatbotMessage(message);\n  };\n\n  this.setChatbotMessage = function (messages) {\n    if (Array.isArray(messages)) {\n      _this.setState(function (state) {\n        return _objectSpread({}, state, {\n          messages: [].concat(_toConsumableArray(state.messages), _toConsumableArray(messages))\n        });\n      });\n    } else {\n      _this.setState(function (state) {\n        return _objectSpread({}, state, {\n          messages: [].concat(_toConsumableArray(state.messages), [messages])\n        });\n      });\n    }\n  };\n\n  this.createChatBotMessage = createChatBotMessage;\n  this.setState = setStateFunc;\n  this.createClientMessage = createClientMessage;\n  this.navigate = useNavigate();\n} // Reply the meeting related questions.\n;\n\nexport default ActionProvider;","map":{"version":3,"names":["apiCall","useNavigate","ActionProvider","createChatBotMessage","setStateFunc","createClientMessage","handleMeeting","message","widget","setChatbotMessage","handleMeetingTure","handleQuestion","text","state","input_text","navigate","data","startsWith","handleVideos","send","setState","src","console","log","message7","handleGuides","message3","handleRelate","length","map","s","message2","handlePost","handleSqlQuiz","handleUnknown","handleMeetingMentalHealth","handleMeetingCovid19","handleMeetingStayingAtHome","handleMeetingCareerAdvice","handleMeetingVaccation","handleGreeting","messageHandler","handleCancle","handleSorry","messages","Array","isArray"],"sources":["C:/Users/99489/Desktop/COMP9323/aws/amplifyapp/src/component/chatbot/ActionProvider.jsx"],"sourcesContent":["// control action for chatbot\r\nimport { apiCall } from '../../Main';\r\nimport { useNavigate } from 'react-router-dom';\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n    this.createClientMessage = createClientMessage;\r\n    this.navigate = useNavigate();\r\n  }\r\n\r\n  // Reply the meeting related questions.\r\n  handleMeeting = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Do you want to book a meeting?\",\r\n      {\r\n        widget: \"optionsmeeting\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n  handleMeetingTure = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Which field to you wank to have meeting?\",\r\n      {\r\n        widget: \"optionsmeetingfield\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  }\r\n\r\n  // Reply user's questions.\r\n  handleQuestion = async (text) => {\r\n    const data = await apiCall('/chatbot', 'POST', { state: 1, input_text: text }, this.navigate);\r\n    if (typeof (data) === 'string' && (!data.startsWith('200') || !data.startsWith('201'))) {\r\n      this.navigate('/login');\r\n      return;\r\n    }\r\n    const message = this.createChatBotMessage(\r\n      \"Sure! Which type of information you would like to get?\",\r\n      {\r\n        widget: \"optionsquestion\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply the user with hte video.\r\n  handleVideos = async () => {\r\n    const send = await apiCall('/chatbot', 'POST', { state: 2, input_text: 'video' })\r\n\r\n    this.setState((state) => ({\r\n      ...state,\r\n      src: send,\r\n    }));\r\n    const message = this.createChatBotMessage(\r\n      `Ok, heres are some video link you can have a look relate to your question`,\r\n      {\r\n        widget: \"herfWidget\"\r\n      }\r\n    );\r\n    console.log('herfwidge');\r\n    this.setChatbotMessage(message);\r\n    const message7 = this.createChatBotMessage(\r\n      \"Do you satisfied with this result or do want want to see some related questions?\",\r\n      {\r\n        widget: \"optionsquestionvideo\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message7);\r\n  };\r\n\r\n  // Reply user's quesiton with hte guide.\r\n  handleGuides = async () => {\r\n    const send = await apiCall('/chatbot', 'POST', { state: 2, input_text: 'guide' })\r\n\r\n    this.setState((state) => ({\r\n      ...state,\r\n      src: send,\r\n\r\n    }));\r\n    const message = this.createChatBotMessage(\r\n      `Ok, heres are some solution to your questions`,\r\n      {\r\n        widget: \"herfGuideWidget\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n\r\n    const message3 = this.createChatBotMessage(\r\n      \"Do you still have some questions relate to this topic? You can post an question on our website or see some related questions.\",\r\n      {\r\n        widget: \"optionsquestionguide\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message3);\r\n  };\r\n\r\n  // Reply the user with question content related answer.\r\n  handleRelate = async () => {\r\n    const send = await apiCall('/chatbot', 'POST', { state: 3, input_text: 'related' })\r\n    console.log(send);\r\n    if (send.text.length !== 0) {\r\n      const message = this.createChatBotMessage(\r\n        \"Here are several related questions, you can ask me by sending me message\",\r\n      );\r\n      this.setChatbotMessage(message);\r\n      send.text.map((s) => {\r\n        const message2 = this.createChatBotMessage(s)\r\n        this.setChatbotMessage(message2);\r\n      })\r\n    } else {\r\n      const message = this.createChatBotMessage(\r\n        \"Here are no related questions\",\r\n      );\r\n      this.setChatbotMessage(message);\r\n    }\r\n  };\r\n\r\n  // Handle the ask for adding a post.\r\n  handlePost = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Okay, please fill in the form\",\r\n      { widget: \"postform\" }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply the SQL related questions.\r\n  handleSqlQuiz = () => {\r\n    const message = this.createChatBotMessage(\"Sure! Here's your SQL QUIZ !\", {\r\n      widget: \"sql\"\r\n    });\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply the unknown questions.\r\n  handleUnknown = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Please ask a question\"\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply with mental health related doctor.\r\n  handleMeetingMentalHealth = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"You can find some doctors to meet for mental health by click the following link\",\r\n      {\r\n        widget: \"meetingmentalhealth\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply with covid-19 related doctor.\r\n  handleMeetingCovid19 = () => {\r\n    console.log('a??');\r\n    const message = this.createChatBotMessage(\r\n      \"You can find some doctors to meet for covid 19 by click the following link\",\r\n      {\r\n        widget: \"meetingcovid19\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply with staying at home related doctor.\r\n  handleMeetingStayingAtHome = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"You can find some doctors to meet for staying at home by click the following link at home\",\r\n      {\r\n        widget: \"meetingstayathome\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply with caree advice related doctor.\r\n  handleMeetingCareerAdvice = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"You can find some doctors to meet for career advice by click the following link advice\",\r\n      {\r\n        widget: \"meetingcareeradvice\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply the vaccination related doctor.\r\n  handleMeetingVaccation = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"You can find some doctors to meet for vaccation by click the following link vaccation\",\r\n      {\r\n        widget: \"meetingmvaccation\"\r\n      }\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  // Reply the greeting message.\r\n  handleGreeting = () => {\r\n    apiCall('/chatbot', 'POST', { state: 3, input_text: 'true' })\r\n    const message = this.createChatBotMessage(\r\n      \"Thanks for trying Wellbeing Bot! We hope you had a great experience\"\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  messageHandler = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Hello, ask me anything\",\r\n\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  handleCancle = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Thanks for trying! Feel free to ask anything!\"\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  handleSorry = () => {\r\n    apiCall('/chatbot', 'POST', { state: 3, input_text: 'false' })\r\n    const message = this.createChatBotMessage(\r\n      \"I am sorry that I do not find those infromations you want :( . You can ask a new questions or ask your previous questions more detailed.\"\r\n    );\r\n    this.setChatbotMessage(message);\r\n  };\r\n\r\n  setChatbotMessage = (messages) => {\r\n    if (Array.isArray(messages)) {\r\n      this.setState((state) => ({\r\n        ...state,\r\n        messages: [...state.messages, ...messages]\r\n      }));\r\n    } else {\r\n      this.setState((state) => ({\r\n        ...state,\r\n        messages: [...state.messages, messages]\r\n      }));\r\n    }\r\n  };\r\n}\r\nexport default ActionProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}